---
- name: Converge
  hosts: all
  become: True
  environment:
    DEBIAN_FRONTEND: noninteractive

  vars:
    hosts_file: /etc/hosts.molecule
    boss__docker__version: "18.03"
    boss__docker__users: ["test"]
    boss__docker__daemon_options:
      - "--dns 8.8.8.8 -H 0.0.0.0:2375 -H unix:///var/run/docker.sock $DOCKER_DAEMON_ARGS"

  pre_tasks:
    - name: Update apt cache.
      apt: update_cache=yes cache_valid_time=600
      when: ansible_os_family == 'Debian'

    - name: Add test user
      user:
        name: "test"
        shell: "/bin/bash"

    # - name: setup devicemapper etc
    #   command: >
    #     # Ensure that all nodes in /dev/mapper correspond to mapped devices currently loaded by the device-mapper kernel driver
    #     dmsetup mknodes

    #     # First, make sure that cgroups are mounted correctly.
    #     CGROUP=/sys/fs/cgroup
    #     : {LOG:=stdio}

    #     [ -d $CGROUP ] ||
    #       mkdir $CGROUP

    #     mountpoint -q $CGROUP ||
    #       mount -n -t tmpfs -o uid=0,gid=0,mode=0755 cgroup $CGROUP || {
    #         echo "Could not make a tmpfs mount. Did you use --privileged?"
    #         exit 1
    #       }

    #     if [ -d /sys/kernel/security ] && ! mountpoint -q /sys/kernel/security
    #     then
    #         mount -t securityfs none /sys/kernel/security || {
    #             echo "Could not mount /sys/kernel/security."
    #             echo "AppArmor detection and --privileged mode might break."
    #         }
    #     fi

    #     # Mount the cgroup hierarchies exactly as they are in the parent system.
    #     for SUBSYS in $(cut -d: -f2 /proc/1/cgroup)
    #     do
    #             [ -d $CGROUP/$SUBSYS ] || mkdir $CGROUP/$SUBSYS
    #             mountpoint -q $CGROUP/$SUBSYS ||
    #                     mount -n -t cgroup -o $SUBSYS cgroup $CGROUP/$SUBSYS

    #             # The two following sections address a bug which manifests itself
    #             # by a cryptic "lxc-start: no ns_cgroup option specified" when
    #             # trying to start containers withina container.
    #             # The bug seems to appear when the cgroup hierarchies are not
    #             # mounted on the exact same directories in the host, and in the
    #             # container.

    #             # Named, control-less cgroups are mounted with "-o name=foo"
    #             # (and appear as such under /proc/<pid>/cgroup) but are usually
    #             # mounted on a directory named "foo" (without the "name=" prefix).
    #             # Systemd and OpenRC (and possibly others) both create such a
    #             # cgroup. To avoid the aforementioned bug, we symlink "foo" to
    #             # "name=foo". This shouldn't have any adverse effect.
    #             echo $SUBSYS | grep -q ^name= && {
    #                     NAME=$(echo $SUBSYS | sed s/^name=//)
    #                     ln -s $SUBSYS $CGROUP/$NAME
    #             }

    #             # Likewise, on at least one system, it has been reported that
    #             # systemd would mount the CPU and CPU accounting controllers
    #             # (respectively "cpu" and "cpuacct") with "-o cpuacct,cpu"
    #             # but on a directory called "cpu,cpuacct" (note the inversion
    #             # in the order of the groups). This tries to work around it.
    #             [ $SUBSYS = cpuacct,cpu ] && ln -s $SUBSYS $CGROUP/cpu,cpuacct
    #     done

    #     # Note: as I write those lines, the LXC userland tools cannot setup
    #     # a "sub-container" properly if the "devices" cgroup is not in its
    #     # own hierarchy. Let's detect this and issue a warning.
    #     grep -q :devices: /proc/1/cgroup ||
    #       echo "WARNING: the 'devices' cgroup should be in its own hierarchy."
    #     grep -qw devices /proc/1/cgroup ||
    #       echo "WARNING: it looks like the 'devices' cgroup is not mounted."

  roles:
    - role: boss-ansible-role-bootstrap
      # Disable raw commands to avoid sudo issues.
      boss__bootstrap_raw: False
      # Don't set domain on Travis.
      boss__bootstrap_domain: ''
      # Try bootstrapping a different IP address to avoid idempotency loop.
      boss__bootstrap_ipv4: '127.0.1.2'
      boss__hosts_file: /etc/hosts.molecule
      boss__bootstrap_admin_default_users:
        - name: bossjones
      boss__bootstrap_admin_groups: [ 'admins', 'staff', 'adm', 'sudo', 'bossjones' ]
      boss__bootstrap_admin_system: False
    - role: boss-ansible-role-core
    - role: boss-ansible-role-fact
    - role: boss-ansible-role-environment
    - role: boss-ansible-role-etckeeper
    - role: geerlingguy.pip
    - role: boss-ansible-role-docker
      boss__docker__install_method: "shell"




  post_tasks:
    - name: Ensure Docker gets installed
      command: docker --version
      register: result_pinned
      changed_when: result_pinned.rc != 0

    - name: Run the equivalent of "apt-get update"
      apt:
        update_cache: True
      changed_when: False

    - name: Ensure pinned Docker version wasn't updated
      # This is valid because 18.06+ is currently out. If the pin failed then
      # this docker --version would be different from the previous check.
      command: docker --version
      register: result
      changed_when: result.stdout != result_pinned.stdout

    - name: Ensure test user can access Docker without root access
      command: groups test
      register: result
      changed_when: result.stdout.split(":")[1] | trim != "test docker"

    - name: Ensure Docker Compose gets installed
      command: docker-compose --version
      register: result
      changed_when: result.rc != 0

    - name: Ensure /etc/systemd/system/docker.service contains '--dns 8.8.8.8'
      # Double dashes: https://unix.stackexchange.com/a/11382
      command: grep -- "--dns 8.8.8.8" /etc/systemd/system/docker.service
      register: result
      changed_when: result.rc != 0

    - name: Ensure Docker clean up cron job was added
      command: crontab -l
      register: result
      changed_when: not result.stdout is search("docker system prune -f")
