---
- name: Converge
  hosts: all
  become: True
  environment:
    DEBIAN_FRONTEND: noninteractive

  vars:
    hosts_file: /etc/hosts.molecule
    boss__docker__version: "18.06"
    boss__docker__users: ["test"]

  pre_tasks:
    - name: Update apt cache.
      apt: update_cache=yes cache_valid_time=600
      when: ansible_os_family == 'Debian'

    - name: Add test user
      user:
        name: "test"
        shell: "/bin/bash"

  roles:
    - role: boss-ansible-role-bootstrap
      # Disable raw commands to avoid sudo issues.
      boss__bootstrap_raw: False
      # Don't set domain on Travis.
      boss__bootstrap_domain: ''
      # Try bootstrapping a different IP address to avoid idempotency loop.
      boss__bootstrap_ipv4: '127.0.1.2'
      boss__hosts_file: /etc/hosts.molecule
      boss__bootstrap_admin_default_users:
        - name: bossjones
      boss__bootstrap_admin_groups: [ 'admins', 'staff', 'adm', 'sudo', 'bossjones' ]
      boss__bootstrap_admin_system: False
    - role: boss-ansible-role-core
    - role: boss-ansible-role-fact
    - role: boss-ansible-role-environment
    - role: boss-ansible-role-etckeeper
    - role: geerlingguy.pip
    - role: ../
      boss__docker__install_method: "pkg"

  ##################################################################################
  # ansible unit tests
  ##################################################################################
  post_tasks:
    - name: Ensure Docker gets installed
      command: docker --version
      register: result_pinned
      changed_when: result_pinned.rc != 0

    - name: Run the equivalent of "apt-get update"
      apt:
        update_cache: true
      changed_when: false

    - name: Ensure pinned Docker version wasn't updated
      # This is valid because 18.06+ is currently out. If the pin failed then
      # this docker --version would be different from the previous check.
      command: docker --version
      register: result
      changed_when: result.stdout != result_pinned.stdout

    - name: Ensure test user can access Docker without root access
      command: groups test
      register: result
      changed_when: result.stdout.split(":")[1] | trim != "test docker"

    - name: Ensure Docker Compose gets installed
      command: docker-compose --version
      register: result
      changed_when: result.rc != 0

    - name: Ensure /etc/docker/daemon.json contains defaults options
      command: grep 10m /etc/docker/daemon.json
      register: result
      changed_when: result.rc != 0

    - name: Ensure /etc/docker/daemon.json contains custom options
      command: grep 8.8.8.8 /etc/docker/daemon.json
      register: result
      changed_when: result.rc != 0

    # - name: Ensure customized environment systemd unit file was created
    #   command: >
    #     grep -e '"HTTP_PROXY=.*" "HTTPS_PROXY=.*"'
    #     /etc/systemd/system/docker.service.d/environment.conf
    #   register: result
    #   changed_when: result.rc != 0

    - name: Ensure customized daemon flags systemd unit file was created
      command: grep debug /etc/systemd/system/docker.service.d/options.conf
      register: result
      changed_when: result.rc != 0

    # - name: Ensure customized systemd overrides were created
    #   command: grep ATest /etc/systemd/system/docker.service.d/custom.conf
    #   register: result
    #   changed_when: result.rc != 0

    - name: Ensure Docker clean up cron job was added
      command: grep "docker system prune -af" /etc/cron.d/docker-disk-clean-up
      register: result
      changed_when: result.rc != 0

    - name: check docker hello world - test 1/2 # It will not work if there is no internet connection; change img as desired
      shell: docker run -i hello-world # | awk '/Hello/ {print $1}'
      register: docker_result
      #failed_when: docker_result.stdout != "Hello"
      tags:
      - check_docker
      - docker
      changed_when: false
      ignore_errors: yes

    - name: Flush handlers like docker-storage-setup, docker, etc
      meta: flush_handlers
      tags:
      - docker

    - name: check docker is running
      command: 'docker info'
      tags:
      - check_docker
      - docker
      changed_when: false

    - name: check docker hello world - test 2/2 # It will not work if there is no internet connection
      shell: docker run -i hello-world | awk '/Hello/ {print $1}'
      register: command_result
      failed_when: command_result.stdout != "Hello"
      tags:
      - check_docker
      - docker
      changed_when: false
