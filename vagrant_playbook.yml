---
- name: Vagrant Test Playbook - docker1
  hosts: docker1
  gather_facts: True
  become: yes
  become_method: sudo
  environment:
    DEBIAN_FRONTEND: noninteractive
    SHELL: /bin/bash
  vars:
    hosts_file: /etc/hosts.molecule
    boss__docker__version: "17.03"
    boss__docker__users: ["test"]
    boss__docker__daemon_options:
      - "--dns 8.8.8.8 -H 0.0.0.0:2375 -H unix:///var/run/docker.sock $DOCKER_DAEMON_ARGS"

  pre_tasks:
    - name: Update apt cache.
      apt: update_cache=yes cache_valid_time=600
      when: ansible_os_family == 'Debian'

    - name: Add test user
      user:
        name: "test"
        shell: "/bin/bash"

  roles:
    - role: boss-ansible-role-core
      tags:
        - boss-ansible-role-core

    - role: boss-ansible-role-update-hosts
      boss__update__hosts__hosts_file: /etc/hosts
      # ansible group to use when finding ip addresses
      boss__update__hosts__ansible_group: "servers"

      boss__update__hosts__networking_interface: "enp0s8" # enp0s8 (if vagrant)

      ### NEW vars
      # SOURCE: https://github.com/bertvv/ansible-role-hosts/blob/master/defaults/main.yml

      boss__update__hosts__hosts_playbook_version: "1.0.1"

      # If set to true, an entry for `ansible_hostname`, bound to the host's default IPv4 address is added added.
      boss__update__hosts__hosts_add_default_ipv4: true

      # If set to true, basic IPv6 entries (localhost6, ip6-localnet, etc) are added.
      boss__update__hosts__hosts_add_basic_ipv6: true

      # If set to true, an entry for every host managed by Ansible is added. Remark that this makes `boss__update__hosts__hosts_add_default_ipv4` unnecessary, as it will be added as wel by this setting.
      boss__update__hosts__hosts_add_ansible_managed_hosts: true

      # Select specific groups of Ansible managed hosts to be added in the hosts file.
      boss__update__hosts__hosts_add_ansible_managed_hosts_groups: ['servers']

      # Custom hosts entries to be added
      boss__update__hosts__hosts_entries: []

      # Custom host file snippets to be added
      boss__update__hosts__hosts_file_snippets: []

      # IP protocol to use
      boss__update__hosts__hosts_ip_protocol: 'ipv4'

      # Network interface to use
      boss__update__hosts__hosts_network_interface: "{{ boss__update__hosts__networking_interface }}"

      # convenience variable that has ansible_ as part of name for dynamic loading
      boss__update__hosts__hosts_ansible_network_interface: "ansible_{{ boss__update__hosts__networking_interface }}"

      # Backup of previous host
      boss__update__hosts__host_file_backup: yes

      # Use old 'override' style or new 'smart' style
      boss__update__hosts__default_task: "smart"
      tags:
        - boss-ansible-role-update-hosts

    - role: boss-ansible-role-bootstrap
      # Disable raw commands to avoid sudo issues.
      boss__bootstrap_raw: False
      # Don't set domain on Travis.
      boss__bootstrap_domain: ''
      # Try bootstrapping a different IP address to avoid idempotency loop.
      # boss__bootstrap_ipv4: '127.0.1.2'
      # boss__hosts_file: /etc/hosts.molecule
      boss__bootstrap_admin_default_users:
        - name: bossjones
      boss__bootstrap_admin_groups: [ 'admins', 'staff', 'adm', 'sudo', 'bossjones' ]
      boss__bootstrap_admin_system: False
      tags:
        - boss-ansible-role-bootstrap

    - role: boss-ansible-role-fact
      tags:
        - boss-ansible-role-fact

    - role: boss-ansible-role-environment
      tags:
        - boss-ansible-role-environment

    - role: boss-ansible-role-etckeeper
      tags:
        - boss-ansible-role-etckeeper

    # # - role: geerlingguy.pip

    - role: boss-ansible-role-timezone
      timezone: 'America/New_York'
      timezone_update_hardware_clock: False
      tags:
        - boss-ansible-role-timezone

    - role: boss-ansible-role-ntp
      task: install
      bossjones__user: vagrant
      bossjones__group: vagrant
      timezone: 'America/New_York'
      timezone_update_hardware_clock: False
      # defaults file for ansible-ntp
      # Defines if host is ntp_master
      # set ntp_master to true on specific group_vars/group
      ntp_master: False

      # Define your ntp_master_servers
      ntp_master_servers:
        - 0.ubuntu.pool.ntp.org
        - 1.ubuntu.pool.ntp.org
        - 2.ubuntu.pool.ntp.org
        - 3.ubuntu.pool.ntp.org
      tags:
        - boss-ansible-role-ntp

    - role: boss-ansible-role-debug
      boss__debug__debug_variables_file: '/tmp/ansible_variables'
      boss__debug__dump_dir: '/etc/ansible_dumps'
      boss__debug__dump_type: 'seperate' # seperate
      tags:
        - boss-ansible-role-debug

    - role: ../
      boss__docker__install_method: "pkg"
      boss__docker__version: '17.03'
      boss__docker__users: ["test"]
      boss__docker__daemon_options:
        - "--dns 8.8.8.8 -H 0.0.0.0:2375 -H unix:///var/run/docker.sock $DOCKER_DAEMON_ARGS"
      tags:
        - boss-ansible-role-docker

  post_tasks:
    - name: Ensure Docker gets installed
      command: docker --version
      register: result_pinned
      changed_when: result_pinned.rc != 0

    - name: Run the equivalent of "apt-get update"
      apt:
        update_cache: True
      changed_when: False

    - name: Ensure pinned Docker version wasn't updated
      # This is valid because 18.06+ is currently out. If the pin failed then
      # this docker --version would be different from the previous check.
      command: docker --version
      register: result
      changed_when: result.stdout != result_pinned.stdout

    - name: Ensure test user can access Docker without root access
      command: groups test
      register: result
      changed_when: result.stdout.split(":")[1] | trim != "test docker"

    - name: Ensure Docker Compose gets installed
      command: docker-compose --version
      register: result
      changed_when: result.rc != 0

    - name: Ensure /etc/systemd/system/docker.service contains '--dns 8.8.8.8'
      # Double dashes: https://unix.stackexchange.com/a/11382
      command: grep -- "--dns 8.8.8.8" /etc/systemd/system/docker.service
      register: result
      changed_when: result.rc != 0

    - name: Ensure Docker clean up cron job was added
      command: crontab -l
      register: result
      changed_when: not result.stdout is search("docker system prune -f")



################################################################################

- name: Vagrant Test Playbook
  hosts: docker2
  gather_facts: True
  become: yes
  become_method: sudo
  environment:
    DEBIAN_FRONTEND: noninteractive
    SHELL: /bin/bash
  vars:
    hosts_file: /etc/hosts.molecule
    boss__docker__version: "17.03"
    boss__docker__users: ["test"]
    boss__docker__daemon_options:
      - "--dns 8.8.8.8 -H 0.0.0.0:2375 -H unix:///var/run/docker.sock $DOCKER_DAEMON_ARGS"

  pre_tasks:
    - name: Update apt cache.
      apt: update_cache=yes cache_valid_time=600
      when: ansible_os_family == 'Debian'

    - name: Add test user
      user:
        name: "test"
        shell: "/bin/bash"

  roles:
    - role: boss-ansible-role-core
      tags:
        - boss-ansible-role-core

    - role: boss-ansible-role-update-hosts
      boss__update__hosts__hosts_file: /etc/hosts
      # ansible group to use when finding ip addresses
      boss__update__hosts__ansible_group: "servers"

      boss__update__hosts__networking_interface: "enp0s8" # enp0s8 (if vagrant)

      ### NEW vars
      # SOURCE: https://github.com/bertvv/ansible-role-hosts/blob/master/defaults/main.yml

      boss__update__hosts__hosts_playbook_version: "1.0.1"

      # If set to true, an entry for `ansible_hostname`, bound to the host's default IPv4 address is added added.
      boss__update__hosts__hosts_add_default_ipv4: true

      # If set to true, basic IPv6 entries (localhost6, ip6-localnet, etc) are added.
      boss__update__hosts__hosts_add_basic_ipv6: true

      # If set to true, an entry for every host managed by Ansible is added. Remark that this makes `boss__update__hosts__hosts_add_default_ipv4` unnecessary, as it will be added as wel by this setting.
      boss__update__hosts__hosts_add_ansible_managed_hosts: true

      # Select specific groups of Ansible managed hosts to be added in the hosts file.
      boss__update__hosts__hosts_add_ansible_managed_hosts_groups: ['servers']

      # Custom hosts entries to be added
      boss__update__hosts__hosts_entries: []

      # Custom host file snippets to be added
      boss__update__hosts__hosts_file_snippets: []

      # IP protocol to use
      boss__update__hosts__hosts_ip_protocol: 'ipv4'

      # Network interface to use
      boss__update__hosts__hosts_network_interface: "{{ boss__update__hosts__networking_interface }}"

      # convenience variable that has ansible_ as part of name for dynamic loading
      boss__update__hosts__hosts_ansible_network_interface: "ansible_{{ boss__update__hosts__networking_interface }}"

      # Backup of previous host
      boss__update__hosts__host_file_backup: yes

      # Use old 'override' style or new 'smart' style
      boss__update__hosts__default_task: "smart"
      tags:
        - boss-ansible-role-update-hosts

    - role: boss-ansible-role-bootstrap
      # Disable raw commands to avoid sudo issues.
      boss__bootstrap_raw: False
      # Don't set domain on Travis.
      boss__bootstrap_domain: ''
      # Try bootstrapping a different IP address to avoid idempotency loop.
      # boss__bootstrap_ipv4: '127.0.1.2'
      # boss__hosts_file: /etc/hosts.molecule
      boss__bootstrap_admin_default_users:
        - name: bossjones
      boss__bootstrap_admin_groups: [ 'admins', 'staff', 'adm', 'sudo', 'bossjones' ]
      boss__bootstrap_admin_system: False
      tags:
        - boss-ansible-role-bootstrap

    - role: boss-ansible-role-fact
      tags:
        - boss-ansible-role-fact

    - role: boss-ansible-role-environment
      tags:
        - boss-ansible-role-environment

    - role: boss-ansible-role-etckeeper
      tags:
        - boss-ansible-role-etckeeper

    # # - role: geerlingguy.pip

    - role: boss-ansible-role-timezone
      timezone: 'America/New_York'
      timezone_update_hardware_clock: False
      tags:
        - boss-ansible-role-timezone

    - role: boss-ansible-role-ntp
      task: install
      bossjones__user: vagrant
      bossjones__group: vagrant
      timezone: 'America/New_York'
      timezone_update_hardware_clock: False
      # defaults file for ansible-ntp
      # Defines if host is ntp_master
      # set ntp_master to true on specific group_vars/group
      ntp_master: False

      # Define your ntp_master_servers
      ntp_master_servers:
        - 0.ubuntu.pool.ntp.org
        - 1.ubuntu.pool.ntp.org
        - 2.ubuntu.pool.ntp.org
        - 3.ubuntu.pool.ntp.org
      tags:
        - boss-ansible-role-ntp

    - role: boss-ansible-role-debug
      boss__debug__debug_variables_file: '/tmp/ansible_variables'
      boss__debug__dump_dir: '/etc/ansible_dumps'
      boss__debug__dump_type: 'seperate' # seperate
      tags:
        - boss-ansible-role-debug

    # - role: boss-ansible-role-bootstrap
    #   # Disable raw commands to avoid sudo issues.
    #   boss__bootstrap_raw: False
    #   # Don't set domain on Travis.
    #   boss__bootstrap_domain: ''
    #   # Try bootstrapping a different IP address to avoid idempotency loop.
    #   boss__bootstrap_ipv4: '127.0.1.2'
    #   boss__hosts_file: /etc/hosts.molecule
    #   boss__bootstrap_admin_default_users:
    #     - name: bossjones
    #   boss__bootstrap_admin_groups: [ 'admins', 'staff', 'adm', 'sudo', 'bossjones' ]
    #   boss__bootstrap_admin_system: False
    # - role: boss-ansible-role-core
    # - role: boss-ansible-role-fact
    # - role: boss-ansible-role-environment
    # - role: boss-ansible-role-etckeeper
    # - role: geerlingguy.pip
    - role: ../
      boss__docker__install_method: "shell"
      boss__docker__version: "17.03"
      boss__docker__users: ["test"]
      boss__docker__daemon_options:
        - "--dns 8.8.8.8 -H 0.0.0.0:2375 -H unix:///var/run/docker.sock $DOCKER_DAEMON_ARGS"

  post_tasks:
    - name: Ensure Docker gets installed
      command: docker --version
      register: result_pinned
      changed_when: result_pinned.rc != 0

    - name: Run the equivalent of "apt-get update"
      apt:
        update_cache: True
      changed_when: False

    - name: Ensure pinned Docker version wasn't updated
      # This is valid because 18.06+ is currently out. If the pin failed then
      # this docker --version would be different from the previous check.
      command: docker --version
      register: result
      changed_when: result.stdout != result_pinned.stdout

    - name: Ensure test user can access Docker without root access
      command: groups test
      register: result
      changed_when: result.stdout.split(":")[1] | trim != "test docker"

    - name: Ensure Docker Compose gets installed
      command: docker-compose --version
      register: result
      changed_when: result.rc != 0

    - name: Ensure /etc/systemd/system/docker.service contains '--dns 8.8.8.8'
      # Double dashes: https://unix.stackexchange.com/a/11382
      command: grep -- "--dns 8.8.8.8" /etc/systemd/system/docker.service
      register: result
      changed_when: result.rc != 0

    - name: Ensure Docker clean up cron job was added
      command: crontab -l
      register: result
      changed_when: not result.stdout is search("docker system prune -f")
