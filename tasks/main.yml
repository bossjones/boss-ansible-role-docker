---
- name: facts
  include_tasks: facts.yml

- name: setup RedHat
  include_tasks: setup-RedHat.yml
  when: ansible_os_family == 'RedHat'

- name: setup Debian
  include_tasks: setup-Debian.yml
  when: ansible_os_family == 'Debian'

- name: install-pkg
  include_tasks: install-pkg.yml
  when: boss__docker__install_method == 'pkg'

- name: install-shell
  include_tasks: install-shell.yml
  when: boss__docker__install_method == 'shell'

#<><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>

# SOURCE: https://github.com/nickjj/ansible-docker/blob/master/tasks/main.yml
- name: Remove Upstart config file
  file:
    path: "/etc/default/docker"
    state: "absent"

- name: Ensure systemd directory exists
  file:
    path: "/etc/systemd/system"
    state: "directory"
    owner: "root"
    group: "root"
    mode: "0755"

- name: Remove systemd unit file
  file:
    path: "/etc/systemd/system/docker.service"
    state: "absent"
  when: boss__docker__remove_package

- name: Generate systemd unit file
  template:
    src: "etc/systemd/system/docker.service.j2"
    dest: "/etc/systemd/system/docker.service"
    owner: "root"
    group: "root"
    mode: "0644"
  register: boss__docker__register_systemd_service
  when: not boss__docker__remove_package

- name: Reload systemd daemon
  systemd:
    daemon_reload: True
  notify: ["Restart Docker"]
  when: not boss__docker__remove_package or boss__docker__register_systemd_service is changed

# SOURCE: https://raymii.org/s/tutorials/Ansible_-_Only_if_a_file_exists_or_does_not_exist.html
- name: stat  /etc/systemd/system/docker.service
  stat: path=/etc/systemd/system/docker.service
  register: docker_systemd_unit_file

- name: dump /etc/systemd/system/docker.service
  command: 'cat /etc/systemd/system/docker.service'
  when: docker_systemd_unit_file.stat.exists == True

# - name: Add user(s) to "docker" group
#   user:
#     name: "{{ item }}"
#     groups: "docker"
#     append: True
#   with_items: "{{ boss__docker__default_users }}"
#   when: not boss__docker__remove_package and boss__docker__default_users

- name: Add user(s) to "docker" group
  user:
    name: "{{ item }}"
    groups: "docker"
    append: True
  with_items: "{{ boss__docker__users }}"
  when: not boss__docker__remove_package and boss__docker__users

- name: Install Python for managing Docker login credentials
  apt:
    name: "python"
    update_cache: True
    cache_valid_time: "{{ boss__docker__apt_cache_time }}"
  when: not boss__docker__remove_package and boss__docker__registries

- name: Install docker-py for managing Docker login credentials
  pip:
    name: "docker-py"
  when: not boss__docker__remove_package and boss__docker__registries

# - name: Manage login credentials for 1 or more Docker registries
#   docker_login:
#     registry_url: "{{ item.registry_url | default(omit) }}"
#     username: "{{ item.username }}"
#     password: "{{ item.password }}"
#     email: "{{ item.email | default(omit)}}"
#     reauthorize: "{{ item.reauthorize | default(omit) }}"
#     state: "{{ item.state | default(omit) }}"
#   with_items: "{{ boss__docker_registries }}"
#   when: not boss__docker_remove_package and boss__docker_registries
#   become_user: "{{ item.system_user | default(omit) }}"

# WIP: 11/30/2018 old guy
# - name: Remove cron tasks for Docker commands
#   cron:
#     name: "{{ item.name }}"
#     state: "absent"
#   with_items: "{{ boss__docker__cron_tasks }}"
#   when: boss__docker__remove_package and boss__docker__cron_tasks

# - name: Create cron tasks for Docker commands
#   cron:
#     name: "{{ item.name }}"
#     job: "{{ item.job }}"
#     minute: "{{ item.schedule[0] }}"
#     hour: "{{ item.schedule[1] }}"
#     day: "{{ item.schedule[2] }}"
#     month: "{{ item.schedule[3] }}"
#     weekday: "{{ item.schedule[4] }}"
#   with_items: "{{ boss__docker__cron_tasks }}"
#   when: not boss__docker__remove_package and boss__docker__cron_tasks

#################### **DFGSHDGISGH

- name: Remove Docker related cron jobs
  file:
    path: "/etc/cron.d/{{ item.cron_file }}"
    state: "absent"
  with_items: "{{ boss__docker__cron_jobs }}"
  when:
    - item.state|default("present") == "absent"
    - item.name|default() and item.job|default()
    - item.schedule|default() and item.cron_file|default()

- name: Create Docker related cron jobs
  cron:
    name: "{{ item.name }}"
    job: "{{ item.job }}"
    minute: "{{ item.schedule[0] }}"
    hour: "{{ item.schedule[1] }}"
    day: "{{ item.schedule[2] }}"
    month: "{{ item.schedule[3] }}"
    weekday: "{{ item.schedule[4] }}"
    cron_file: "{{ item.cron_file }}"
    user: "{{ item.user|default('root') }}"
  with_items: "{{ boss__docker__cron_jobs }}"
  when:
    - item.state|default("present") != "absent"
    - item.name|default() and item.job|default()
    - item.schedule|default() and item.cron_file|default()


# FIXME: This might be broken
- name: Ensure Docker is started and enabled at boot.
  service:
    name: docker
    state: "{{ boss__docker__service_state }}"
    enabled: "{{ boss__docker__service_enabled }}"

#<><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>


- name: Ensure handlers are notified now to avoid firewall conflicts.
  meta: flush_handlers

- include_tasks: docker-compose.yml
  when: boss__docker__install_compose

- include_tasks: docker-users.yml
  when: boss__docker__users
